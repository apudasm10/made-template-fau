// Build an automated data pipeline for the following source:
//     https://mobilithek.info/offers/-94981960701408443
//     direct link to CSV: https://www-genesis.destatis.de/genesis/downloads/00/tables/46131-0014_00.csv
// Goal
//     Remove metadata rows (initial description and headers [data starts in row 9], copyright notice in the footer)
//     Ensure German umlauts are saved correctly
//     Select only a subset of columns
//         Data about time and transported goods: Column A-E
//         Data about quantity: Column AT-AU
//     Add header names for the first columns A-E
//         New names: 'year', 'month', 'goods_id', 'goods_name', 'goods_source'
//     Rename headers for the quantity columns AT-AU
//         New names: 'abroad', 'total'
//     Choose suitable value types for all columns
//         Numeric values must be positive integers
//         'month' must be a German month, capitalized
//         'goods_id' must start with NST7-, followed by three numbers or capital letters
//     Drop rows with missing or invalid values
//     Assign fitting built-in SQLite types (e.g., BIGINT, TEXT or FLOAT) to all columns
//     Write data into a SQLite database called “goodsTransportedByTrain.sqlite”, in the table “goods”

pipeline goodsPipeline {
    // dataFetcher -> dataProcessor;

    goodsExtractor
        -> goodsTextFileInterpreter
        -> goodsCSVInterpreter
        // -> csvProcessor 
        -> metaDataCleaner
        -> headerWriter1
        -> headerWriter2
        -> tableProcessor
        -> dataSaver;


    block goodsExtractor oftype HttpExtractor {
		url: "https://www-genesis.destatis.de/genesis/downloads/00/tables/46131-0014_00.csv";
	}
	// Text Interpreter
	block goodsTextFileInterpreter oftype TextFileInterpreter {encoding: "latin3";}

	// CSV Interpreter
	block goodsCSVInterpreter oftype CSVInterpreter {
		delimiter: ";";
        enclosing: '';
	}

    block metaDataCleaner oftype RowDeleter {
        delete: [row 1, row 2, row 3, row 4, row 5, row 6, row 7, row 41337, row 41338, row 41339];
    }

    block headerWriter1 oftype CellWriter {
        at: range A1:E1;
        write: ["year", "month", "goods_id", "goods_name", "goods_source"];
    }

    block headerWriter2 oftype CellWriter {
        at: range AT1:AU1;
        write: ["abroad", "total"];
    }

    constraint MonthRegex oftype RegexConstraint {
        regex: /\b(Januar|Februar|März|April|Mai|Juni|Juli|August|September|Oktober|November|Dezember)\b/;
    }

    constraint IdRegex oftype RegexConstraint {
        regex: /^NST7-[0-9A-Z]{3}$/;
    }

    constraint NonNegative oftype RangeConstraint {
        lowerBound: 0;
        lowerBoundInclusive: true;
    }

    valuetype MonthType oftype text {
        constraints: [MonthRegex,];
    }

    valuetype PositiveInteger oftype integer {
        constraints: [NonNegative,];
    }

    valuetype ItemIdType oftype text {
        constraints: [IdRegex,];
    }

    block tableProcessor oftype TableInterpreter {
        header: true;
        columns: [
            "year" oftype PositiveInteger,
            "month" oftype MonthType,
            "goods_id" oftype ItemIdType,
            "goods_name" oftype text,
            "goods_source" oftype text,
            "abroad" oftype PositiveInteger,
            "total" oftype PositiveInteger
        ];
    }

    block dataSaver oftype SQLiteLoader {
        table: "goods";
        file: "./goodsTransportedByTrain.sqlite";
    }
}
