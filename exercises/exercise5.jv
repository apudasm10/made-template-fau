// Build an automated data pipeline for the following source:
// Direct download link: https://gtfs.rhoenenergie-bus.de/GTFS.zip
// Goal
// Work with domain-specific GTFS data
// Pick out only stops (from stops.txt)
// Only the columns stop_id, stop_name, stop_lat, stop_lon, zone_id with fitting data types
// Filter data
// Only keep stops from zone 1645
// Validate data
// stop_name must be a text but must maintain german umlauts
// stop_lat/stop_lon must be a geographic coordinates between -90 and 90, including upper/lower bounds
// Drop rows containing invalid data
// Use fitting SQLite types (e.g., BIGINT, TEXT or FLOAT) for all columns
// Write data into a SQLite database called “gtfs.sqlite”, in the table “stops”
// Use Jayvee version 0.4.0
// The documentation link is https://jvalue.github.io/jayvee/docs/0.4.0/user/intro/
// Submit as  /exercises/exercise5.jv



pipeline GTFSPipeline {

    GTFSExtractor
        -> GTFSZipInterpreter
        -> GTFSFilePicker
        -> GTFSTextFileInterpreter
        -> GTFSCSVInterpreter
        -> GTFSTableInterpreter
        -> loadData;

    block GTFSExtractor oftype HttpExtractor {
		url: "https://gtfs.rhoenenergie-bus.de/GTFS.zip";
	}

    block GTFSZipInterpreter oftype ArchiveInterpreter {
        archiveType: "zip";
    }

    block GTFSFilePicker oftype FilePicker {
        path:"/stops.txt";
    }

	// Text Interpreter
	block GTFSTextFileInterpreter oftype TextFileInterpreter {
        encoding: "latin3";
    }

	// CSV Interpreter
	block GTFSCSVInterpreter oftype CSVInterpreter {
		delimiter: ",";
        enclosing: '"';
	}

    constraint zone1645 on integer:
        value == 1645;

    valuetype OnlyZone1645 oftype integer {
        constraints: [zone1645];
    }

    constraint GeoCoor oftype RangeConstraint {
        lowerBound: -90;
        lowerBoundInclusive: true;
        upperBound: 90;
        upperBoundInclusive: true;
    }

    valuetype GeoCoorAngle oftype decimal {
        constraints: [GeoCoor];
    }

    block GTFSTableInterpreter oftype TableInterpreter {
        header: true;
        columns:[
            "stop_id" oftype integer,
            "stop_name" oftype text,
            "stop_lat" oftype GeoCoorAngle,
            "stop_lon" oftype GeoCoorAngle,
            "zone_id" oftype OnlyZone1645
        ];
    }

    block loadData oftype SQLiteLoader {
        table: "stops";
        file: "./gtfs.sqlite";
    }


}